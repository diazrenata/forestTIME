---
title: "Extracting FIA timeseries"
format: gfm
editor: source
---

```{r}
#| echo: TRUE
#| message: FALSE
#| warning: FALSE

library(duckdb)
library(dplyr)
library(ggplot2)


source(here::here("R", "query_tables_db_fxns.R"))

con <- connect_to_tables(here::here("data", "db", "foresttime-from-state-parquet.duckdb"))

theme_set(theme_bw())

```


# Whitebark pine for Montana, Idaho, and Wyoming

SPCD = 101

STATECD = 16, 30, 56

```{r}

whitebark_pine  <- query_tree_surveys(
  con = con,
  conditions = create_conditions(STATECD %in% c(16, 30, 56),
                                 SPCD == 101,
                                 ANY_SPCD_FLAG == FALSE), # This filters out trees with changing SPCD over time
  variables = c("STATUSCD", 
                "DIA", 
                "HT", 
                "COND_STATUS_CD", 
                "LAT", 
                "LON",
                "BALIVE", 
                "SICOND", 
                "SISP", 
                "SIBASE",
                "DSTRBCD1",
                "DSTRBYR1",
                "DSTRBCD2",
                "DSTRBYR2",
                "DSTRBCD3",
                "DSTRBYR3",
                "SDIMAX_RMRS",
                "SDI_RMRS",
                "SLOPE",
                "ASPECT",
                "CONDPROP_UNADJ",
                "RECONCILECD",
                "PREV_STATUS_CD",
                "AGENTCD")
)

knitr::kable(head(whitebark_pine))

```


## How many trees have been surveyed how many times in each state?

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE

whitebark_pine_measures <- whitebark_pine |> 
  group_by(STATECD, TREE_COMPOSITE_ID) |>
  summarize(n = length(unique(INVYR))) 

knitr::kable(whitebark_pine_measures |>
               group_by(STATECD, n) |>
               tally() |>
               rename(n_measures = n,
                      n_trees = nn))


```

**Notably, zero trees in Wyoming (STATECD = 56) have been surveyed more than one time.**

## Plotting DIA, HT of trees with repeated measurements

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE

whitebark_pine_repeats <- filter(whitebark_pine_measures, n > 1) |>
  left_join(whitebark_pine)

ggplot(whitebark_pine_repeats, aes(INVYR, DIA, group = TREE_COMPOSITE_ID)) +
  geom_line() +
  facet_wrap(vars(STATECD), scales = "free") +
  ggtitle("DIA")


ggplot(whitebark_pine_repeats, aes(INVYR, HT, group = TREE_COMPOSITE_ID)) +
  geom_line() +
  facet_wrap(vars(STATECD), scales = "free") +
  ggtitle("HT")

```

## Saving data to share

```{r}

write.csv(whitebark_pine, here::here("use_cases", "whitebark_pine", "whitebark_pine.csv"))

```


The saved file is `r trunc(file.size(here::here("use_cases", "whitebark_pine", "whitebark_pine.csv")) / 1E6, 3)` MB.



## Ceci's code

```{r}

#filter out dead trees in new df
dead_trees <- whitebark_pine_repeats %>%
  group_by(TREE_COMPOSITE_ID) %>%
  filter(all(any(STATUSCD == 2), any(STATUSCD == 1))) %>%
  ungroup()

length(unique(dead_trees$TREE_COMPOSITE_ID)) # 1904 individuals 

#get the DIA values when trees were alive so we can plot death as a function of the state variable (size)
alive_dia <- dead_trees %>%
  filter(STATUSCD == 1) %>%
  select(TREE_COMPOSITE_ID, DIA, AGENTCD)

#filter trees that survived - last status is alive, so statuscd ==1
survived_trees <- whitebark_pine_repeats %>%
  group_by(TREE_COMPOSITE_ID) %>%
  filter(STATUSCD == 1) %>% 
  ungroup()

# Renata's note: The above chunk is going to get all records for which the statuscd == 1, including the *first* records for trees that later die. To get trees that live to the end, you want filter(all(STATUSCD == 1))). 
fully_survived_trees <- whitebark_pine_repeats |>
  group_by(TREE_COMPOSITE_ID) |>
  filter(all(STATUSCD == 1)) |>
  ungroup()

#length(unique(alive_dia$TREE_COMPOSITE_ID)) # 1,904 trees died
#length(unique(survived_trees$TREE_COMPOSITE_ID)) # 4,960 trees survived
length(unique(fully_survived_trees$TREE_COMPOSITE_ID)) # 2767 trees are alive in all years surveyed. 

tree_total_fates <- whitebark_pine_repeats |>
  group_by(TREE_COMPOSITE_ID) |>
  mutate(NYEARS = length(unique(INVYR))) |>
  filter(NYEARS > 1) |>
  mutate(FIRST_INVYR = min(INVYR),
         lagged_status_code = lag(STATUSCD, order_by = INVYR, default = -999),
         lagged_INVYR = lag(STATUSCD, order_by = INVYR, default = -1989)) |>
  filter(INVYR != FIRST_INVYR) |>
  ungroup() |>
  group_by(INVYR, lagged_INVYR, STATUSCD,lagged_status_code) |> # remove INVYR and lagged_INVYR to get tallies over all timesteps
  tally()


# The other way #### 

mort_trees <- whitebark_pine_repeats %>% 
  filter(STATUSCD == 2) |>
  filter(PREV_STATUS_CD == 1) %>%
  relocate(STATUSCD, PREV_STATUS_CD, MEASYEAR, .after = 3) %>%
  distinct() #1869 dead trees

surv_trees <- whitebark_pine_repeats %>%
  filter(STATUSCD == 1 & PREV_STATUS_CD == 1) %>%
  distinct()

length(unique(surv_trees$TREE_COMPOSITE_ID)) #2761 trees survived vs 2767 - 6 total off
length(unique(mort_trees$TREE_COMPOSITE_ID)) #1869 trees died vs 1904 - 35 total off 

```

## Investigating discrepancy

```{r}

whitebark_pine_repeats_lags <- whitebark_pine_repeats |>
  group_by(TREE_COMPOSITE_ID) |>
  mutate(LAGGED_STATUSCD = lag(STATUSCD, order_by = INVYR, default = 100),
         FIRST_INVYR = min(INVYR)) |>
  ungroup() |>
  filter(INVYR != FIRST_INVYR) |>
  mutate(PREV_matches_LAG = PREV_STATUS_CD == LAGGED_STATUSCD)

nrow(whitebark_pine_repeats_lags) - sum(whitebark_pine_repeats_lags$PREV_matches_LAG, na.rm = T)

```

There are 230 rows where the PREV_STATUS_CD doesn't match the lagged statuscd.

```{r}

mismatch <- whitebark_pine_repeats_lags |>
  filter(is.na(PREV_matches_LAG) | !PREV_matches_LAG) |>
  select(TREE_COMPOSITE_ID, INVYR, STATUSCD, PREV_STATUS_CD, LAGGED_STATUSCD) 

sum(unique(dead_trees$TREE_COMPOSITE_ID) %in% mismatch$TREE_COMPOSITE_ID)

sum(unique(fully_survived_trees$TREE_COMPOSITE_ID) %in% mismatch$TREE_COMPOSITE_ID)



```



## Clean up

```{r}
dbDisconnect(con, shutdown = TRUE)

```