---
title: "Extracting FIA timeseries for tree rings"
format: gfm
editor: source
---

```{r}

library(duckdb)
library(dplyr)
library(ggplot2)

source(here::here("R", "query_tables_db_fxns.R"))

con <- connect_to_tables(here::here("data", "db", "foresttime-from-state-parquet.duckdb"))

theme_set(theme_bw())

```


# States and species

```{r}
sp_kelly <-
  c(316, 318, 832, 833, 802, 621, 531, 400, 129, 97, 762, 261, 837, 541, 12)
states_kelly <-
  read.csv(here::here("useful_information", "fips.csv")) |>
  filter(STATE %in% c(
    "OH", "PA", "MD", "MA", "NJ", "VT", "NH", "RI", "ME", "CT", "WV", "NY", "IN", "IA", "IL", "MI", "MO", "WI", "MN"
  ))
states_kelly <- states_kelly$STATEFP
```

# Query database

```{r}

tree_ring <-
  query_tree_surveys(con = con,
                 conditions = create_conditions(STATECD %in% states_kelly,
                                                 SPCD %in% sp_kelly,
                                                 ANY_SPCD_FLAG == FALSE # This filters out any trees that have multiple SPCDs recorded over time. 
                  ),
                  variables = c("DIA",
                                "STATUSCD",
                                "CONDID", 
                                "SLOPE",
                                "ASPECT",
                                "MORTCD",
                                "DSTRBCD1",
                                "DSTRBYR1",
                                "DSTRBCD2",
                                "DSTRBYR2",
                                "DSTRBCD3",
                                "DSTRBYR3",
                                "FORTYPCD"
                  ) # You can request any variables from the TREE, CONDITION, or PLOT table (except for the MODIFIED and CREATED_IN_INSTANCE codes). If you want the CNs for the rows from the PLOT or CONDITION tables those are named PLOT_CN and COND_CN, respectively. 
  )

dbDisconnect(con, shutdown = TRUE)
```


## How many trees have been surveyed how many times in each state?

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE
#| 
tree_ring_measures <- tree_ring |> 
  group_by(STATECD, TREE_COMPOSITE_ID) |>
  summarize(n = length(unique(INVYR))) 

knitr::kable(tree_ring_measures |>
               group_by(STATECD, n) |>
               tally() |>
               rename(n_measures = n,
                      n_trees = nn) |>
  left_join(read.csv(here::here("useful_information", "fips.csv")) |> select(STATEFP, STATE), by = c("STATECD" = "STATEFP")) |>
  select(STATE, STATECD, n_measures, n_trees))


```


## How many trees have been surveyed of each species?

```{r}
#| echo: FALSE
#| message: FALSE
#| warning: FALSE
#| 

knitr::kable(tree_ring |> 
  select(SPCD, TREE_COMPOSITE_ID) |>
  distinct() |>
  group_by(SPCD) |>
  tally()
)


```

## Saving data to share

```{r}

write.csv(tree_ring, here::here("use_cases", "tree_rings", "tree_ring.csv"))

```

The saved file is `r trunc(file.size(here::here("use_cases", "tree_rings", "tree_ring.csv")) / 1E6, 3)` MB.


## Clean up

```{r}
dbDisconnect(con, shutdown = TRUE)

```